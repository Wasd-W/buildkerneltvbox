name: Build Images
#
# Generates beta, stable or RC images. You can select build runners. By default it generates all images, but you can build images only for one target
# Images are placed at www.arnmbian.com and nighly beta also at https://github.com/armbian/build/releases/tag/latest
#

on:

  workflow_run:
    workflows: ["Build train"]
    types:
      - completed

  workflow_dispatch:

    inputs:

      choice:
        type: choice
        description: Build targets
        options:
        - beta
        - stable
        - rc

      runner:
        type: choice
        description: Build runners for CLI
        options:
        - small
        - ubuntu-latest

      sourcerepo:
        description: Source repository
        required: false
        default: 'nightly'

      packagesrepo:
        type: choice
        description: Beta packages repository
        options:
        - "yes"
        - "no"

      advanced:
        description: 'Single board (grep -w tinkerboard |)'
        required: false
        default: ''

env:
   GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  jobsend:

    name: finish
    runs-on: [ubuntu-latest]
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: nightly
          
      - name: Make build list
        run: |
        
          sudo npm install --location=global json || true
          truncate README.me --size=0 || true
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
          cat ".github/Releases.md" >> README.tmp
          echo -en "\n"
          echo "| Image | GPG | SHA | Release | Branch | Variant | Size | Kernel |" >> README.tmp
          echo "| --- | :--: | :--: | :--: | :--: | :--: | --: | --: |" >> README.tmp
          gh release view --json assets 2>/dev/null | python3 -mjson.tool | sed  '1,2d;$d' | json -ga name url size -d, | sort | (
          while read -r line; do
           name=$(echo $line | cut -d"," -f1 | awk '{print tolower($0)}')
           url=$(echo $line | cut -d"," -f2)
           size=$(echo $line | cut -d"," -f3)
           if [ "${name: -3}" == ".xz" ]; then
             board_name=$(echo $name | cut -d"_" -f3)
             source config/boards/$board_name.*
             out_release=$(echo $name | cut -d"_" -f4)
             out_branch=$(echo $name | cut -d"_" -f5)
             out_kernel=$(echo $name | cut -d"_" -f6-7 | cut -d"." -f1-3 | cut -d"_" -f1)
             out_desktop=$(echo $name | cut -d"_" -f7)
             out_desktop=${out_desktop:-cli}
             out_size=$(echo "scale=2; $size/1024/1024" | bc -l)" Mb"
             echo -ne "| [$BOARD_NAME]($url) | [:file_folder:]($url".asc") | [:file_folder:]($url".sha") | $out_release | $out_branch | $out_desktop | $out_size | $out_kernel |\n" >> README.tmp
           fi
          done
          )
          cat README.tmp
        
      - uses: ncipollo/release-action@v1
        with:
          #tag: "latest"
          tag: "${{ env.VERSION }}"
          bodyFile: "README.tmp"
          name: "Automated builds"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
